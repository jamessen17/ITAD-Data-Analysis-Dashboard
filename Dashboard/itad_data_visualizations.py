#!/usr/bin/env python3
"""
ITAD Data Visualization Script
Creates comprehensive visualizations for IT Asset Disposition analysis
Requires the synthetic ITAD dataset generated by the previous script
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# Set style for better-looking plots
plt.style.use('default')
sns.set_palette("husl")
plt.rcParams['figure.figsize'] = (12, 8)
plt.rcParams['font.size'] = 10

def load_and_prepare_data(filename='synthetic_itad_dataset.csv'):
    """
    Load and prepare the ITAD dataset for visualization
    """
    try:
        df = pd.read_csv(filename)
        print(f"Successfully loaded dataset with {len(df):,} records")
        
        # Convert processing_date to datetime
        df['processing_date'] = pd.to_datetime(df['processing_date'])
        
        # Create month-year for time series analysis
        df['month_year'] = df['processing_date'].dt.to_period('M')
        
        # Create refurbished flag for easier filtering
        df['is_refurbished'] = df['refurbishment_success'].astype(bool)
        
        return df
    except FileNotFoundError:
        print(f"Error: Could not find {filename}")
        print("Please run the dataset generation script first")
        return None

def plot_total_sales_over_time(df):
    """
    1. Plot total sales revenue over time (Line Graph)
    """
    plt.figure(figsize=(14, 8))
    
    # Group by month and sum revenue
    monthly_sales = df.groupby('month_year')['final_sale_price_usd'].sum().reset_index()
    monthly_sales['month_year_str'] = monthly_sales['month_year'].astype(str)
    
    plt.plot(range(len(monthly_sales)), monthly_sales['final_sale_price_usd'], 
             marker='o', linewidth=2.5, markersize=8)
    
    plt.title('Total Sales Revenue Over Time', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Month', fontsize=12)
    plt.ylabel('Revenue (USD)', fontsize=12)
    
    # Format y-axis as currency
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))
    
    # Set x-axis labels
    plt.xticks(range(len(monthly_sales)), monthly_sales['month_year_str'], rotation=45)
    
    # Add trend line
    z = np.polyfit(range(len(monthly_sales)), monthly_sales['final_sale_price_usd'], 1)
    p = np.poly1d(z)
    plt.plot(range(len(monthly_sales)), p(range(len(monthly_sales))), 
             "--", alpha=0.7, color='red', label=f'Trend Line')
    
    plt.grid(True, alpha=0.3)
    plt.legend()
    plt.tight_layout()
    plt.savefig('1_total_sales_over_time.png', dpi=300, bbox_inches='tight')
    plt.show()

def plot_revenue_by_device_type(df):
    """
    2. Total sales revenue by device type (Bar Chart)
    """
    plt.figure(figsize=(12, 8))
    
    device_revenue = df.groupby('equipment_type')['final_sale_price_usd'].sum().sort_values(ascending=False)
    
    bars = plt.bar(device_revenue.index, device_revenue.values, 
                   color=sns.color_palette("viridis", len(device_revenue)))
    
    plt.title('Total Sales Revenue by Device Type', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Device Type', fontsize=12)
    plt.ylabel('Revenue (USD)', fontsize=12)
    
    # Format y-axis as currency
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                f'${height:,.0f}', ha='center', va='bottom', fontsize=10)
    
    plt.xticks(rotation=45)
    plt.grid(True, alpha=0.3, axis='y')
    plt.tight_layout()
    plt.savefig('2_revenue_by_device_type.png', dpi=300, bbox_inches='tight')
    plt.show()

def plot_refurbished_revenue_pie(df):
    """
    3. Pie Chart - Refurbished Sales Revenue by Device Type (Percentages)
    """
    plt.figure(figsize=(10, 10))
    
    # Filter for refurbished items only
    refurb_df = df[df['is_refurbished'] == True]
    
    if len(refurb_df) == 0:
        print("No refurbished items found for pie chart")
        return
    
    refurb_revenue = refurb_df.groupby('equipment_type')['final_sale_price_usd'].sum()
    
    # Create pie chart
    colors = sns.color_palette("Set3", len(refurb_revenue))
    wedges, texts, autotexts = plt.pie(refurb_revenue.values, labels=refurb_revenue.index, 
                                      autopct='%1.1f%%', startangle=90, colors=colors,
                                      textprops={'fontsize': 11})
    
    plt.title('Refurbished Sales Revenue by Device Type', fontsize=16, fontweight='bold', pad=20)
    
    # Add total revenue in center
    total_refurb_revenue = refurb_revenue.sum()
    plt.text(0, 0, f'Total\n${total_refurb_revenue:,.0f}', 
             ha='center', va='center', fontsize=12, fontweight='bold',
             bbox=dict(boxstyle="round,pad=0.3", facecolor="white", alpha=0.8))
    
    plt.axis('equal')
    plt.tight_layout()
    plt.savefig('3_refurbished_revenue_pie.png', dpi=300, bbox_inches='tight')
    plt.show()

def plot_refurbished_revenue_by_region(df):
    """
    4. Bar Chart - Refurbished Sales Revenue by Region
    """
    plt.figure(figsize=(12, 8))
    
    # Filter for refurbished items only
    refurb_df = df[df['is_refurbished'] == True]
    
    if len(refurb_df) == 0:
        print("No refurbished items found for regional analysis")
        return
    
    region_revenue = refurb_df.groupby('region')['final_sale_price_usd'].sum().sort_values(ascending=False)
    
    bars = plt.bar(region_revenue.index, region_revenue.values,
                   color=sns.color_palette("plasma", len(region_revenue)))
    
    plt.title('Refurbished Sales Revenue by Region', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Region', fontsize=12)
    plt.ylabel('Revenue (USD)', fontsize=12)
    
    # Format y-axis as currency
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                f'${height:,.0f}', ha='center', va='bottom', fontsize=10)
    
    plt.xticks(rotation=45)
    plt.grid(True, alpha=0.3, axis='y')
    plt.tight_layout()
    plt.savefig('4_refurbished_revenue_by_region.png', dpi=300, bbox_inches='tight')
    plt.show()

def plot_refurbished_sales_stacked(df):
    """
    5. Stacked Bar Chart - Refurbished Sales by Channel and Device Type
    """
    plt.figure(figsize=(14, 8))
    
    # Filter for refurbished items only
    refurb_df = df[df['is_refurbished'] == True]
    
    if len(refurb_df) == 0:
        print("No refurbished items found for stacked chart")
        return
    
    # Create pivot table for stacked chart
    pivot_data = refurb_df.pivot_table(
        values='final_sale_price_usd', 
        index='sales_channel', 
        columns='equipment_type', 
        aggfunc='sum', 
        fill_value=0
    )
    
    # Create stacked bar chart
    ax = pivot_data.plot(kind='bar', stacked=True, figsize=(14, 8),
                        colormap='tab20', width=0.8)
    
    plt.title('Refurbished Sales Revenue by Channel and Device Type', 
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Sales Channel', fontsize=12)
    plt.ylabel('Revenue (USD)', fontsize=12)
    
    # Format y-axis as currency
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))
    
    plt.xticks(rotation=45)
    plt.legend(title='Device Type', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True, alpha=0.3, axis='y')
    plt.tight_layout()
    plt.savefig('5_refurbished_sales_stacked.png', dpi=300, bbox_inches='tight')
    plt.show()

def plot_revenue_by_sales_channel(df):
    """
    6. Total sales revenue by sales channel (Bar Chart)
    """
    plt.figure(figsize=(12, 8))
    
    channel_revenue = df.groupby('sales_channel')['final_sale_price_usd'].sum().sort_values(ascending=False)
    
    bars = plt.bar(channel_revenue.index, channel_revenue.values,
                   color=sns.color_palette("coolwarm", len(channel_revenue)))
    
    plt.title('Total Sales Revenue by Sales Channel', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Sales Channel', fontsize=12)
    plt.ylabel('Revenue (USD)', fontsize=12)
    
    # Format y-axis as currency
    plt.gca().yaxis.set_major_formatter(plt.FuncFormatter(lambda x, p: f'${x:,.0f}'))
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                f'${height:,.0f}', ha='center', va='bottom', fontsize=10)
    
    plt.xticks(rotation=45)
    plt.grid(True, alpha=0.3, axis='y')
    plt.tight_layout()
    plt.savefig('6_revenue_by_sales_channel.png', dpi=300, bbox_inches='tight')
    plt.show()

def plot_refurbishment_success_histogram(df):
    """
    7. Histogram for refurbishment success rate by device type
    """
    plt.figure(figsize=(14, 8))
    
    # Calculate success rate by device type
    success_rates = df.groupby('equipment_type').agg({
        'refurbishment_success': ['sum', 'count']
    }).round(3)
    
    # Flatten column names
    success_rates.columns = ['successful', 'total']
    success_rates['success_rate'] = (success_rates['successful'] / success_rates['total'] * 100).round(1)
    success_rates = success_rates.sort_values('success_rate', ascending=False)
    
    bars = plt.bar(success_rates.index, success_rates['success_rate'],
                   color=sns.color_palette("RdYlBu_r", len(success_rates)))
    
    plt.title('Refurbishment Success Rate by Device Type', fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('Device Type', fontsize=12)
    plt.ylabel('Success Rate (%)', fontsize=12)
    
    # Add value labels on bars
    for bar in bars:
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                f'{height:.1f}%', ha='center', va='bottom', fontsize=10)
    
    plt.xticks(rotation=45)
    plt.ylim(0, 100)
    plt.grid(True, alpha=0.3, axis='y')
    
    # Add average line
    avg_success_rate = success_rates['success_rate'].mean()
    plt.axhline(y=avg_success_rate, color='red', linestyle='--', alpha=0.7,
                label=f'Average: {avg_success_rate:.1f}%')
    plt.legend()
    
    plt.tight_layout()
    plt.savefig('7_refurbishment_success_histogram.png', dpi=300, bbox_inches='tight')
    plt.show()

def create_summary_dashboard(df):
    """
    Create a summary dashboard with key metrics
    """
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    
    # 1. Revenue by Equipment Type (Top-left)
    device_revenue = df.groupby('equipment_type')['final_sale_price_usd'].sum().sort_values(ascending=True)
    ax1.barh(device_revenue.index, device_revenue.values, color=sns.color_palette("viridis", len(device_revenue)))
    ax1.set_title('Revenue by Device Type', fontweight='bold')
    ax1.set_xlabel('Revenue (USD)')
    
    # 2. Regional Distribution (Top-right)
    region_counts = df['region'].value_counts()
    ax2.pie(region_counts.values, labels=region_counts.index, autopct='%1.1f%%')
    ax2.set_title('Sales Distribution by Region', fontweight='bold')
    
    # 3. Monthly Trend (Bottom-left)
    monthly_sales = df.groupby('month_year')['final_sale_price_usd'].sum()
    ax3.plot(range(len(monthly_sales)), monthly_sales.values, marker='o')
    ax3.set_title('Monthly Sales Trend', fontweight='bold')
    ax3.set_xlabel('Month')
    ax3.set_ylabel('Revenue (USD)')
    ax3.tick_params(axis='x', rotation=45)
    
    # 4. Channel Performance (Bottom-right)
    channel_revenue = df.groupby('sales_channel')['final_sale_price_usd'].sum().sort_values(ascending=True)
    ax4.barh(channel_revenue.index, channel_revenue.values, color=sns.color_palette("plasma", len(channel_revenue)))
    ax4.set_title('Revenue by Sales Channel', fontweight='bold')
    ax4.set_xlabel('Revenue (USD)')
    
    plt.tight_layout()
    plt.savefig('summary_dashboard.png', dpi=300, bbox_inches='tight')
    plt.show()

def print_key_insights(df):
    """
    Print key insights from the data
    """
    print("\n" + "="*60)
    print("KEY INSIGHTS FROM ITAD DATA ANALYSIS")
    print("="*60)
    
    total_revenue = df['final_sale_price_usd'].sum()
    total_records = len(df)
    refurb_success_rate = df['refurbishment_success'].mean() * 100
    
    print(f"📊 OVERALL PERFORMANCE:")
    print(f"   • Total Revenue: ${total_revenue:,.0f}")
    print(f"   • Total Assets Processed: {total_records:,}")
    print(f"   • Average Sale Price: ${df['final_sale_price_usd'].mean():.2f}")
    print(f"   • Refurbishment Success Rate: {refurb_success_rate:.1f}%")
    
    # Top performing metrics
    top_device = df.groupby('equipment_type')['final_sale_price_usd'].sum().idxmax()
    top_region = df.groupby('region')['final_sale_price_usd'].sum().idxmax()
    top_channel = df.groupby('sales_channel')['final_sale_price_usd'].sum().idxmax()
    
    print(f"\n🏆 TOP PERFORMERS:")
    print(f"   • Highest Revenue Device: {top_device}")
    print(f"   • Highest Revenue Region: {top_region}")
    print(f"   • Highest Revenue Channel: {top_channel}")
    
    # Carbon impact
    total_carbon_saved = df['carbon_savings_kg'].sum()
    print(f"\n🌱 SUSTAINABILITY IMPACT:")
    print(f"   • Total Carbon Saved: {total_carbon_saved:,.0f} kg CO2e")
    print(f"   • Avg Carbon Saved per Asset: {df['carbon_savings_kg'].mean():.1f} kg CO2e")
    
    # Refurbishment insights
    refurb_df = df[df['is_refurbished'] == True]
    if len(refurb_df) > 0:
        refurb_revenue = refurb_df['final_sale_price_usd'].sum()
        refurb_percentage = (refurb_revenue / total_revenue) * 100
        print(f"\n🔧 REFURBISHMENT INSIGHTS:")
        print(f"   • Refurbished Revenue: ${refurb_revenue:,.0f} ({refurb_percentage:.1f}% of total)")
        print(f"   • Avg Refurbished Sale Price: ${refurb_df['final_sale_price_usd'].mean():.2f}")

def main():
    """
    Main function to run all visualizations
    """
    print("ITAD Data Visualization Suite")
    print("=" * 40)
    
    # Load data
    df = load_and_prepare_data()
    if df is None:
        return
    
    print("Creating visualizations...")
    
    # Generate all visualizations
    try:
        plot_total_sales_over_time(df)
        plot_revenue_by_device_type(df)
        plot_refurbished_revenue_pie(df)
        plot_refurbished_revenue_by_region(df)
        plot_refurbished_sales_stacked(df)
        plot_revenue_by_sales_channel(df)
        plot_refurbishment_success_histogram(df)
        create_summary_dashboard(df)
        
        print("\n✅ All visualizations created successfully!")
        print("\nGenerated files:")
        print("1. 1_total_sales_over_time.png")
        print("2. 2_revenue_by_device_type.png")
        print("3. 3_refurbished_revenue_pie.png")
        print("4. 4_refurbished_revenue_by_region.png")
        print("5. 5_refurbished_sales_stacked.png")
        print("6. 6_revenue_by_sales_channel.png")
        print("7. 7_refurbishment_success_histogram.png")
        print("8. summary_dashboard.png")
        
        # Print insights
        print_key_insights(df)
        
    except Exception as e:
        print(f"❌ Error creating visualizations: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()